➤ Container Data Management
➤ Persistent Data
➤ Data Volumes
➤ Bind Mount Points in Containers

➤ Container Persistent Data Problem
➤ Containers are immutable : Once deploy never change, only re-deploy.
➤ Config Change or version Upgrade need re-deploy.
➤ By default all files created inside a container are stored on a writable container layer.
➤ The data doesn’t persist when that container no longer exists, and it can be difficult to get the data out of the container if another process needs it.

➤ Docker has two options for containers to store files in the host machine, so that the files are persisted even after the container stops-
	➤ Volumes
	➤ Bind Mounts

--------------------------

Persistent Data : Data Volumes :--
	
➤ Volumes : Volumes are stored in a part of the host filesystem which is managed by Docker.
➤ Volumes are created and Managed by Containers.
➤ Volumes can be create by Volume Command in Docker File.
➤ When you create a volume, it is stored within a directory on the Docker host machine.
➤ Volumes can not be removed when user destroy the containers.
➤ Pull mySQL image
➤ Run My SQL
	docker container run -d - -name mysql -e MYSQL_ALLOW_EMPTY_PASSWORD=True mysql
➤ List volumes
➤ Inspect Volumes
➤ Named volumes
➤ Run My SQL with named Volume 
	docker container run -d - -name mysql -e MYSQL_ALLOW_EMPTY_PASSWORD=True -v mysql-db:/var/lib/ mysql mysql
➤ Create Volumes
	docker volume create <name>
➤ Remove Volume
	docker volume rm <name>
➤ Named volumes
➤ Run My SQL with named Volume
	docker container run -d - -name mysql -e MYSQL_ALLOW_EMPTY_PASSWORD=True - -mount source=mysql-db, target=/var/lib/mysql mysql
➤ Create Volumes
	docker volume create <name>
➤ Remove Volume
	docker volume rm <name>
	


DATA VOLUMES PRATICAL:--
	
	STEP 1 : docker pull mysql
	STEP 2 : docker inspect mysql 
		You see the volume path as below :
		"Image": "",
            "Volumes": {
                "/var/lib/mysql": {}
    STEP 3 : docker run -d --name mysqldb -e MYSQL_ALLOW_EMPTY_PASSWORD=True mysql
    STEP 4 : docker inspect mysqldb:
    	List volumes
    	"Mounts": [
            {
                "Type": "volume",
                "Name": "159ee294a214b56c1e8dfd65329f3e74f82cdaa5e7d6ebebf825679768682e6a",
                "Source": "/var/lib/docker/volumes/159ee294a214b56c1e8dfd65329f3e74f82cdaa5e7d6ebebf825679768682e6a/_data", : Volume has been created on this path.
                "Destination": "/var/lib/mysql",
                "Driver": "local",
                "Mode": "",
                "RW": true,
                "Propagation": ""
     STEP 5 : docker volume ls : You can see the volume has been created.
     STEP 6 : docker run -d --name mysqldb2 -e MYSQL_ALLOW_EMPTY_PASSWORD=True mysql
     	You can see another Vloume has been created
     STEP 7 : docker volume inspect 159ee294a214b56c1e8dfd65329f3e74f82cdaa5e7d6ebebf825679768682e6a
     STEP 8 : docker run -d --name mysqldb2 -e MYSQL_ALLOW_EMPTY_PASSWORD=True --mount source=mysql-db,destination=/var/lib/mysql mysql
     STEP 9 : docker volume ls
     	You can see the VOLUME NAME has been created
     STEP 10 : docker container stop mysqldb2
     STEP 11 : docker run -d --name mysqldb3 -e MYSQL_ALLOW_EMPTY_PASSWORD=True --mount source=mysql-db,destination=/var/lib/mysql mysql
     STEP 12 : docker volume ls
     	You can check the save VOLUME NAME is attached in the New container
     	
     	
------------------------

Persistent Data : Bind Mounts
    		
➤ Bind Mounts : Bind mount means a file or directory on the host machine is mounted into a container..
➤ Mapping of Host Files into a Container Files.
➤ Bind mounts may be stored anywhere on the host system.
➤ Non-Docker processes on the Docker host or a Docker container can modify them at any time.
➤ Bind Mount can’t be use in DockerFile.   
➤ Good Use Case of Bind Mounts
	➤ Sharing configuration files from the host machine to containers.
	➤ Sharing source code or build artifacts between a development environment on the Docker host and a container.    

➤ Start nginx with Bind Mount
➤ Run NGINX
	docker container run -d - -name nginx - -mount type=bind, source=$ (pwd),target=/app nginx
    
    
DATA MOUNT PRATICAL:--
	
	STEP 1 : docker container run -d --name nginxbind --mount type=bind,source=$(pwd),target=/app nginx
	STEP 2 : docker inspect nginxbind
		You can check the Mount bind volume :
			
		"Mounts": [
            {
                "Type": "bind",
                "Source": "/home/ubuntu/dockerbind",
                "Destination": "/app",
                "Mode": "",
                "RW": true,
                "Propagation": "rprivate"
            }

    STEP 3 : docker exec -it 454e02fa13fc bash
    	Go the the inside the container
    	ls : You can see the app directory
    	cd /app/
    
    STEP 4 : Now go the My Host Machine director
    	/home/ubuntu/dockerbind
    	Create some file : echo "Hi, This is sudhansu file" > test.txt
    STEP 5 : docker exec -it 454e02fa13fc bash
    	cd /app/ : You can see the Host file is available in the Container
    
 -------------------------------------------------------------------------------------------------------------------------------------------------------------
 
 
➤ DataBase Upgrade with Volumes in Containers
➤ Create mysql container with some specific version with Volume named mysql-db
➤ After Starting the Container Verify Container Status
➤ Go to Database and Create Some Data
➤ Stop and remove the Container
➤ Strat new MqSQL Container with existing Volume and Verify the Data
 
 
➤ Create mysql container with some specific version with
	Volume named mysql-db
➤ Start Mysql Container
	docker container run --name=mysqltest mysql
➤ Start Mysql with admin password
	docker run --name=test-mysql --env="MYSQL_ROOT_PASSWORD=mypassword" mysql
➤ Remove existing Container and Start Again
➤ Verify MqSQL Container
➤ Stop/remove mySQL Container and Start with user Defined Volumes
	docker run --name=test-mysql --env="MYSQL_ROOT_PASSWORD=mypassword" --mount source=mysql-db, target=/var/lib/mysql mysql
➤ Verify mysql Containers
➤ Go to MySQL DataBase and Create Data
 ➤ Go to MySQL DataBase and Create Data
➤ Inspect container to find the IP
➤ Get the Running Port
➤ Install MySQL client package.
	apt-get install mysql-client
➤ Execute Command to login MySQL DB
➤ mysql -u root -p <password> -h <hostIP> -P <port>
	mysql -u root -p mypassword -h 172.17.0.20 -P 3306 
➤ Create DataBase
	CREATE DATABASE databasename;
➤ Create Table in DataBase
	CREATE TABLE Persons ( PersonID int, LastName varchar(255),
	FirstName varchar(255), Address varchar(255), City varchar(255) );
➤ Insert Some Data into the Table
	INSERT INTO Persons (PersonID, LastName, FirstName, Address, City)VALUES (14, 'B. Erichsen', ’Tom’, ‘Skagen 216’, 'Norway'); INSERT INTO Persons (PersonID, LastName, FirstName, Address, City)VALUES (17, 'Zbyszek', ’Wolski’, ‘Keskuskatu 45’, ‘Finland');
➤ Verify DataBase
	Select * From Persons; 
➤ Stop and Remove the Running Container.
➤ Start a New MySQL Container with earlier Data Volumes.
	docker run —name=test-mysql-secound --env="MYSQL_ROOT_PASSWORD=mypassword" --mount source=mysql-db, target=/var/lib/mysql mysql
➤ Go to the DataBase
➤ Verify the Data, user have created in earlier Container.


PRATICAL :--
	
	STEP 1 : 
	STEP 2 : docker run --name=test-mysql --env="MYSQL_ROOT_PASSWORD=mypassword" mysql
	STEP 3 : docker stop test-mysql
	STEP 4 : docker container rm test-mysql
	STEP 5 : docker container run -it -d --name test-mysql -e "MYSQL_ROOT_PASSWORD=mypassword" --mount source=mysql-db,target=/var/lib/mysql mysql
	STEP 6 : docker volume ls
	STEP 7 : docker inspect test-mysql
		"Mounts": [
            {
                "Type": "volume",
                "Name": "mysql-db",
                "Source": "/var/lib/docker/volumes/mysql-db/_data",
                "Destination": "/var/lib/mysql",
                "Driver": "local",
                "Mode": "z",
                "RW": true,
                "Propagation": ""
            }
     STEP 8 : cd /var/lib/docker/volumes/mysql-db/_data/
     	ls : You can check the data has been created
     STEP 9 : docker inspect test-mysql
     STEP 10 : sudo apt-get install mysql-client
     STEP 11 : mysql -u root -pmypassword -h 172.17.0.2 -P 3306
     STEP 12 : CREATE DATABASE testdb; 
     STEP 13 : show databases; 
     STEP 14 : use testdb;
     STEP 15 : Insert Some Data into the Table
		INSERT INTO Persons (PersonID, LastName, FirstName, Address, City)VALUES (14, 'B. Erichsen', ’Tom’, ‘Skagen 216’, 'Norway'); INSERT INTO Persons (PersonID, LastName, FirstName, Address, City)VALUES (17, 'Zbyszek', ’Wolski’, ‘Keskuskatu 45’, ‘Finland');
     STEP 16 : Select * from Persons; 
     STEP 17 : exit
     STEP 18 : docker rm -f mysql-test : Remove running container 
     STEP 19 : docker run -it -d --name mysql-test -e "MYSQL_ROOT_PASSWORD=password" --mount source=mysql-db,target=/var/lib/mysql mysql:9.0.1
     	Again create container with upgraded version 
     STEP 20 : mysql -u root -ppassword -h 172.17.0.2 -P 3306
     STEP 21 : show databases;
     	Now you can see the same data in different mysql version. 
     	
     	
 ------------------------------------------------------------------------------------------------------------------------------------------------------------- 
  
 Assignment : Bind Mounts
 
➤ Start Nginx Container
➤ Bind Mount the Nginx Container
➤ Edit the Index.html File in Local System (Host Machine)
➤ Verify the the change on Running Container

➤ Start Nginx with Bind Mount Location
	docker container run -p 80:80 - -mount type=bind,source="$(pwd)",target=/usr/share/nginx/html nginx
➤ Change File at Mount Location


------------------------------------------------------------------------------------------------------------------------------------------------------------- 

➢ Container Data Management
➢ Persistent Data
➢ Data Volumes
➢ Bind Mount Points in Containers

➢ Container Persistent Data Problem
➢ Containers are immutable : Once deploy never change, only re-deploy.
➢ Config Change or version Upgrade need re-deploy.
➢ By default all files created inside a container are stored on a writable container layer.
➢ The data doesn’t persist when that container no longer exists, and it can be difficult to get the data out of the container if another process needs it.

➢ Container Persistent Data Problem
➢ Containers are immutable : Once deploy never change, only re-deploy.
➢ Config Change or version Upgrade need re-deploy.
➢ By default all files created inside a container are stored on a writable container layer.
➢ The data doesn’t persist when that container no longer exists, and it can be difficult to get the data out of the container if another process needs it. 
➢ Docker has two options for containers to store files in the host machine, so that the files are persisted even after the container stops-
➢ Volumes
➢ Bind Mounts           