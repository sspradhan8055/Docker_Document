DOCKERFILE:--

➢ Docker can build images automatically by reading the instructions from a Dockerfile.
➢ A Dockerfile is a text document that contains all the commands a user could call on the command line to assemble an image.
➢ A Docker image consists of read-only layers each of which represents a Dockerfile instruction.
➢ Command to build image from Dockerfile:
	docker build -f <dockerfile_path>

FORM

➢ Docker file Instructions are used to Create the Docker Images.
➢ FROM: The FROM instruction initializes a new build stage and sets the Base Image for subsequent instructions.
➢ A valid Dockerfile must start with a FROM instruction.
➢ Base Image can be any valid image.
➢ Format:
 FROM <Image_name>:<Image_tag>

LABEL
 
➢ LABEL : LABEL added to image to organize images by project, record licensing information.
➢ For each label, add a line beginning with LABEL and with one or more key-value pairs.
➢ LABEL com.example.version=“0.0.1-beta"
➢ LABEL vendor1="ACME Incorporated"

RUN

➢ RUN : RUN instruction will execute any commands in a new layer on top of the current image and commit the results.
➢ The resulting committed image will be used for the next step in the Dockerfile.
➢ FROM ubuntu:14.04
➢ RUN apt-get update
➢ RUN apt-get install -y curl

CMD

➢ CMD : CMD instruction should be used to run the software contained by your image, along with any arguments.
➢ CMD [“executable","param1","param2"]
➢ There can only be one CMD instruction in a Dockerfile. If you list more than one CMD then only the last CMD will take effect.
➢ The main purpose of a CMD is to provide defaults for an executing container.

EXPOSE

➢ EXPOSE : EXPOSE instruction indicates the ports on which a container listens for connections.
	EXPOSE <port>
➢ ENV : ENV instruction sets the environment variable to the value .
➢ To make new software easier to run, you can use ENV to update the PATH environment variable for the software your container installs.
➢ ENV PATH /usr/local/nginx/bin:$PATH

ADD

➢ ADD : ADD instruction copies new files, directories or remote file URLs from <src> and adds them to the filesystem of the image at the path <dest>.
➢ ADD hom* /mydir/ # adds all files starting with “hom"

VOLUME

➢ VOLUME : VOLUME instruction should be used to expose any database storage area, configuration storage, or files/ folders created by your docker container.

WORKDIR

➢ WORKDIR : WORKDIR instruction sets the working directory for any RUN, CMD, ADD instructions that follow it in the Dockerfile.

---------------------------------

➢ Docker Image is Build from DockerFile.
➢ Docker Build Syntax :
	docker build -t ImageName:TagName dir
➢ -t − is to mention a tag to the image.
➢ ImageName − This is the name you want to give to your image.
➢ TagName − This is the tag you want to give to your image.
➢ Dir − The directory where the Docker File is present.
➢ Create Custom Nginx Image and Execute it.
➢ Tools we will use to Edit Docker File: Visual Studio
➢ Download Link of Visual Studio. https://visualstudio.microsoft.com/downloads/
➢ Create DockerFile.

---------------------------------


PRATICAL :--
	1. mkdir customImage : Create directory
	2. cd customImage/
	3. nano dockerfile : Create dockerfile
	
-----	
#The line below stte we will base our new images on the latest Official Ubuntu
FROM ubuntu:latest

# Identity the maintainer  of an Image
LABEL version="0.0.1"
LABEL maitainer="sspradhan8055@gmail.com"

# Update the image to the latest packages
RUN apt-get update && apt-get upgrade -y

# Install NGINX to test.
RUN apt-get install nginx -y

# Expose port 80
EXPOSE 80

# Last is the atcual comand to start up NGINX within our container
CMD [ "nginx", "-g", "deamon off;" ]

----
	4. docker build -t sspradhan8055/nginx_custom:0.0.1 . : Run the Duckerfile
	5. Docke Images
	6. docker inspect sspradhan8055/nginx_custom:0.0.1
	7. cd ..
	8. docker build -t sspradhan8055/nginx_custom:0.0.2 customImage/
	9. docker images

-------------------------------------

Custom Official Images :--
	1. mkdir extend_images
	2. cd extend_images/
	3. nano dockerfile
------	
FROM nginx:latest

LABEL version="0.0.1"
LABEL maitainer="sspradhan8055@gmail.com"

WORKDIR /usr/share/nginx/html

COPY index.html index.html
------

	4. nano index.html
		<h1>Hello Sudhansu, This is my Custom Nginx Image</h1>
	5. docker build -t sspradhan8055/nginx_extended:0.0.1 extend_images/
	6. docker images
	7. docker run -it -p 8081:80 -d --name nginx_extend sspradhan8055/nginx_extended:0.0.1
		Check the output
	8 nano extend_images/index.html : Edit some file
		<h2>This my Docker Learing Point</h2>
	9. docker build -t sspradhan8055/nginx_extended:0.0.2 extend_images/
	10. docker rm -f nginx_extend
	11. docker run -it -p 8081:80 -d --name nginx_extend sspradhan8055/nginx_extended:0.0.2
		Now check the output



-------------------------------------


