GitLab :--

# Create a GitLab Free account.
# Create a New Project -> MyProject
# Create (.gitlab-ci.yml) for GitLab Project

Step 1 : Install Git
Step 2 : Install Docker
Step 3 : configure the GitLab Runner to work with gitlab.com
	1. Go to https://gitlab.com/sspradhan8055/mytestproject
	2. Setting CI/CD -> Runners
	3. Project runners -> New project runner
	4. Tags -> Add tags to specify jobs that the runner can run : MyMACRunner
	5. Configuration (optional) : Runner description
	6. Create Runner -> Register runner -> Operating systems : macOS
	7. GitLab Runner must be installed before you can register a runner. How do I install GitLab Runner? Cick
	8. Install GitLab Runner -> Select platform specifications to install GitLab Runner.
		# Download the binary for your system
			sudo curl --output /usr/local/bin/gitlab-runner https://gitlab-runner-downloads.s3.amazonaws.com/latest/binaries/gitlab-runner-darwin-arm64
		# Give it permission to execute
			sudo chmod +x /usr/local/bin/gitlab-runner
		# The rest of the commands execute as the user who will run the runner
		# Register the runner (steps below), then run
			cd ~
			gitlab-runner install
			gitlab-runner start
	9. Step 1 : Copy and paste the following command into your command line to register the runner.
			gitlab-runner register  --url https://gitlab.com  --token glrt-t3_2Jwuceur3zjahxgSWEeB
	10. Step 2 : Choose an executor when prompted by the command line. Executors run builds in different environments
	11. Step 3 (optional) : Manually verify that the runner is available to pick up jobs.
			gitlab-runner run
	12. View Runner

Step 4 : Git clone https://gitlab.com/sspradhan8055/mytestproject
Step 5 : Edit -> gitlab-ci.yml
Ste 6 : Wrte a yam code :--
		stages:
    		- build
    		- test
    		- prod
    	build:
    		stage: build
    		script:
    			- echo "Building"
        		- mkdir build
        		- touch build/info.txt
        	artifacts:
        		paths:
            		- build/
        test:
    		stage: test
    			script:
        			- echo "Testing"
       				- test -f "build/info.txt"
       	prod:
    		stage: prod
    		script:
      			- echo "My Prodiction"
 
Step 6 : git add .
step 7 : git commit -m "New code"
step 8 : git push
Step 9 : Now go the GitLab Project and check the runner is running
Step 10 : Project -> Build -> Pipeline
Step 11 : Project -> Build -> Pipeline -> open Job.
Step 12 : Job artifacts : These artifacts are the latest. They will not be deleted (even if expired) until newer artifacts are available.
		Click on Browser -> Artefact Name -> Build -> You are being redirected away from GitLab

-----------------------------------------------------------------------------------------------

stages:
    - build
    - test

build_car:
    image: alpine
    stage: build
    script:
        - echo "Building the car"
        - mkdir build
        - cd build
        - echo "chassis" >> car.txt
        - echo "engine" >> car.txt
        - echo "wheels" >> car.txt
        - cat car.txt
    artifacts:
        paths:
            - build/

test:
    image: alpine
    stage: test
    script:
        - test -f build/car.txt
        - grep "chassis" build/car.txt
        - grep "engine" build/car.txt
        - grep "wheels" build/car.txt

-----------------------------------------------------------------------------------------------

GitHub New App:--

Git Clone git@gitlab.com:sspradhan8055/learn-gitlab-app.git
https://nodejs.org/en/download
	1. cd learn-gitlab-app
	2. Download Node.js
		# Download and install nvm:
		curl -o- https://raw.githubusercontent.com/nvm-sh/nvm/v0.40.1/install.sh | bash
		# in lieu of restarting the shell
		\. "$HOME/.nvm/nvm.sh"
		# Download and install Node.js:
		nvm install 22
		# Verify the Node.js version:
		node -v # Should print "v22.14.0".
		nvm current # Should print "v22.14.0".
		# Verify npm version:
		npm -v # Should print "10.9.2".
	3. npm install
	4. npm install -g serve
	
	5. .gitlab-ci.yml:-
		test_npm:
    	image: node:22
    	script:
        	node --version
        	npm --version
       
     6. git push
	
-----------------------------------------

test_npm:
    image: node:22-alpine
    script:
        node --version
        npm --version
        
stages:
    - build


stages:
    - build


build_websites:
    image: node:22-alpine
    stage: build
    script:
       - node --version
       - npm --version
       - ls -la
       - npm ci
       - npm run build
       - ls -la
 
-----------------------------------------

artefacts:--	

stages:
    - build


build_websites:
    image: node:22-alpine
    stage: build
    script:
       - node --version
       - npm --version
       - npm ci
       - npm run build
    artifacts:
        paths:
           - build/
      
-----------------------------------------

Adding new test a stage:

stages:
    - build
    - test

build_websites:
    image: node:22-alpine
    stage: build
    script:
       - node --version
       - npm --version
       - npm ci
       - npm run build
    artifacts:
        paths:
           - build/

test_artifact:
    image: alpine
    stage: test
    script:
        - test -f build/index.html     

-----------------------------------------

Adding unit stage :

stages:
    - build
    - test
    - unit

build_websites:
    image: node:22-alpine
    stage: build
    script:
       - node --version
       - npm --version
       - npm ci
       - npm run build
    artifacts:
        paths:
           - build/

test_artifact:
    image: alpine
    stage: test
    script:
        - test -f build/index.html

unit_tests:
    image: node:22-alpine
    stage: unit
    script:
        - npm ci
        - npm test

-----------------------------------------

Runnint Job with same stage:

stages:
    - build
    - test


build_websites:
    image: node:22-alpine
    stage: build
    script:
       - node --version
       - npm --version
       - npm ci
       - npm run build
    artifacts:
        paths:
           - build/

test_artifact:
    image: alpine
    stage: test
    script:
        - test -f build/index.html

unit_tests:
    image: node:22-alpine
    stage: test
    script:
        - npm ci
        - npm test
 
 -----------------------------------------

Runnint Job with artefacts:


 stages:
    - build
    - test


build_websites:
    image: node:22-alpine
    stage: build
    script:
       - node --version
       - npm --version
       - npm ci
       - npm run build
    artifacts:
        paths:
           - build/

test_artifact:
    image: alpine
    stage: test
    script:
        - test -f build/index.html

unit_tests:
    image: node:22-alpine
    stage: test
    script:
        - npm ci
        - npm test
    artifacts:
        when: always
        reports:
            junit: reports/junit.xml